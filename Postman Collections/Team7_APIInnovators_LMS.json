{
	"info": {
		"_postman_id": "015bbcc1-4d23-4b56-ad4b-20b7ee9f52a2",
		"name": "Team7_APIInnovators_LMS_Postman",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fda034b-aad2-4c2e-b14d-753643f49610",
								"exec": [
									"\r",
									"// Set Authorization token to environment variable\r",
									"if(pm.variables.get(\"statusCode\")===200){\r",
									"    var jsonData = pm.response.json();\r",
									"pm.environment.set(\"Authtoken\", jsonData.token);\r",
									"}\r",
									"\r",
									"// Valid Schema\r",
									"var validschema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"passwordExpired\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"email\",\r",
									"    \"roles\",\r",
									"    \"status\",\r",
									"    \"passwordExpired\"\r",
									"  ]\r",
									"}\r",
									"// Invalid Schema\r",
									"var Invalidschema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"// Schema validation for valid & invalid scenario\r",
									"if(pm.variables.get(\"statusCode\")===200){\r",
									"    pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"    pm.response.to.have.jsonSchema(validschema);\r",
									"})}\r",
									"else if(pm.variables.get(\"statusCode\")===400){\r",
									"    pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"    pm.response.to.have.jsonSchema(Invalidschema);\r",
									"})}\r",
									" \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c088c983-b75c-4426-a9d9-795819623872",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\",\r\n    \"userLoginEmailId\": \"{{userLoginEmailId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				}
			],
			"id": "455a8d4c-7576-456c-928f-cdafe73bc979"
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Add New Program with all fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "688453f7-10d0-43fc-b5af-2286c668cac8",
								"exec": [
									"\r",
									"let scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"if ( scenario == 'Program with all fields - valid fields'){\r",
									"\r",
									"    //We need to generate unique program name\r",
									"    let nameSuffix = pm.variables.replaceIn('{{$randomWord}}');\r",
									"    pm.variables.set(\"programName\", \"postman-\"+nameSuffix);\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fed37dc0-a205-4cca-8a8c-e3a08f849304",
								"exec": [
									"\r",
									"console.log (\"Validating Response, Iternation\", (pm.info.iteration)); \r",
									"\r",
									"if ( pm.response.code == 201 ){\r",
									"\r",
									"    //Now validating schema\r",
									"    const schema = {\r",
									"\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"programId\": { \"type\": \"integer\"},\r",
									"                    \"programName\": { \"type\": \"string\"},\r",
									"                    \"programDescription\": { \"type\": \"string\"},\r",
									"                    \"programStatus\": { \"type\": \"string\"},\r",
									"                    \"creationTime\": { \"type\": \"string\"},\r",
									"                    \"lastModTime\": { \"type\": \"string\"}\r",
									"                },\r",
									"                \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"        };\r",
									"\r",
									"    const scenario = pm.variables.get(\"scenario\");\r",
									"    pm.test(`[${scenario}] - Validating Schema`, function () {\r",
									"        \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    \r",
									"    //program is created, save it for following requests - chaining\r",
									"    let respBody = pm.response.json();\r",
									"    pm.collectionVariables.set(\"programId\", respBody.programId);\r",
									"    pm.collectionVariables.set(\"programName\", respBody.programName);\r",
									"    //pm.environment.set(\"programId\", respBody.programId);\r",
									"    //pm.environment.set(\"programName\", respBody.programName);\r",
									"\r",
									"    console.log(\"Program ID: \"+respBody.programId);\r",
									"    console.log(\"Program Name: \"+respBody.programName);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "10dcf95b-01e2-4346-9073-8e27577eff51",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"programName\": \"{{programName}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "Add New Program with Mandatory fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "688453f7-10d0-43fc-b5af-2286c668cac8",
								"exec": [
									"\r",
									"let scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"if ( scenario == 'Program with mandatory fields - successful'){\r",
									"\r",
									"    //We need to generate unique program name\r",
									"    let nameSuffix = pm.variables.replaceIn('{{$randomWord}}');\r",
									"    pm.variables.set(\"programName\", \"postman-\"+nameSuffix);\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fed37dc0-a205-4cca-8a8c-e3a08f849304",
								"exec": [
									"\r",
									"if ( pm.response.code == 201 ){\r",
									"\r",
									"    //Now validating schema\r",
									"    const schema = {\r",
									"\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"programId\": { \"type\": \"integer\"},\r",
									"                    \"programName\": { \"type\": \"string\"},\r",
									"                    \"programStatus\": { \"type\": \"string\"},\r",
									"                    \"creationTime\": { \"type\": \"string\"},\r",
									"                    \"lastModTime\": { \"type\": \"string\"}\r",
									"                },\r",
									"                \"required\": [\"programId\", \"programName\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"        };\r",
									"\r",
									"    const scenario = pm.variables.get(\"scenario\");\r",
									"    pm.test(`[${scenario}] - Validating Schema`, function () {\r",
									"        \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"    //program is created, save it for following requests - chaining\r",
									"    let respBody = pm.response.json();\r",
									"    pm.collectionVariables.set(\"programId2\", respBody.programId);\r",
									"    pm.collectionVariables.set(\"programName2\", respBody.programName);\r",
									"   //  pm.environment.set(\"programId2\", respBody.programId);\r",
									"    //pm.environment.set(\"programName2\", respBody.programName);\r",
									"\r",
									"    console.log(\"Program ID 2: \"+respBody.programId);\r",
									"    console.log(\"Program Name 2: \"+respBody.programName);\r",
									" \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "36f22f1d-cd0e-421d-b780-2351c9d8d789",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "Get Programs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "688453f7-10d0-43fc-b5af-2286c668cac8",
								"exec": [
									" if(pm.variables.get(\"programId\")=== \"{{programId}}\"){\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programId\"));\r",
									"}\r",
									"if(pm.variables.get(\"programName\") === \"{{programName}}\"){\r",
									"pm.variables.set(\"programName\", pm.collectionVariables.get(\"programName\"));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fed37dc0-a205-4cca-8a8c-e3a08f849304",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5d95f0df-4aba-41fe-b29c-980c87d917c4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update Program",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "688453f7-10d0-43fc-b5af-2286c668cac8",
								"exec": [
									"\r",
									"let scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"if ( scenario == 'Program with valid fields'){\r",
									"\r",
									"    //We need to generate unique program name\r",
									"    let nameSuffix = pm.variables.replaceIn('{{$randomWord}}');\r",
									"    pm.variables.set(\"programName\", \"postman-\"+nameSuffix);\r",
									"}\r",
									"\r",
									" if(pm.variables.get(\"programId\")=== \"{{programId}}\"){\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programId\"));\r",
									"}\r",
									"if(pm.variables.get(\"programName\") === \"{{programName}}\"){\r",
									"pm.variables.set(\"programName\", pm.collectionVariables.get(\"programName\"));\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fed37dc0-a205-4cca-8a8c-e3a08f849304",
								"exec": [
									"\r",
									"\r",
									"if ( pm.response.code == 200 ){\r",
									"\r",
									"    //Now validating schema\r",
									"    const schema = {\r",
									"\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"programId\": { \"type\": \"integer\"},\r",
									"                    \"programName\": { \"type\": \"string\"},\r",
									"                    \"programDescription\": { \"type\": \"string\"},\r",
									"                    \"programStatus\": { \"type\": \"string\"},\r",
									"                    \"creationTime\": { \"type\": \"string\"},\r",
									"                    \"lastModTime\": { \"type\": \"string\"}\r",
									"                },\r",
									"                \"required\": [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
									"        };\r",
									"\r",
									"    const scenario = pm.variables.get(\"scenario\");\r",
									"    pm.test(`[${scenario}] - Validating Schema`, function () {\r",
									"        \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    \r",
									"    //program is created, save it for following requests - chaining\r",
									"    let respBody = pm.response.json();\r",
									"    //pm.environment.set(\"programId\", respBody.programId);\r",
									"    pm.environment.set(\"programName\", respBody.programName);\r",
									"\r",
									"    //console.log(\"Program ID: \"+respBody.programId);\r",
									"    console.log(\"Program Name: \"+respBody.programName);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0a729a35-0fd3-4236-b1d8-903387d8000e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"programName\": \"{{programName}}\",\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				}
			],
			"id": "05931068-4e09-4228-a3ba-f5970f0b24d7"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "AddBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd283ffa-f42e-4c5c-893b-6209899b6964",
								"exec": [
									"\r",
									"if(pm.variables.get(\"statusCode\")===201 && pm.variables.get(\"scenario\")===\"AddValid\")\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									"    pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"}\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"var Invalidschema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"// Schema validation for valid & invalid scenario\r",
									"if(pm.variables.get(\"statusCode\")===201){\r",
									"    pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"})}\r",
									"else if(pm.variables.get(\"statusCode\")===400){\r",
									"    pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"        pm.response.to.have.jsonSchema(Invalidschema);\r",
									"})\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82ba28eb-eb05-4754-894d-4efa94fd59c6",
								"exec": [
									"\r",
									"if(pm.variables.get(\"scenario\") === \"AddValid\"){\r",
									"    \r",
									"    let Name = \"APIBatch\" + pm.variables.replaceIn('{{$randomFirstName}}');\r",
									"     pm.variables.set(\"batchName\", Name);\r",
									"     console.log(\"Generated Batch name:\", Name);\r",
									" }\r",
									"\r",
									" if(pm.variables.get(\"programId\")=== \"{{programId}}\"){\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programId\"));\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "165155f5-0183-42dd-bd3c-89cde9c3588f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"batchDescription\": \"{{batchDescription}}\",\r\n\"batchName\": \"{{batchName}}\",\r\n\"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n\"batchStatus\": \"{{batchStatus}}\",\r\n\"programId\": \"{{programId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "SearchBatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9a5e78e-350a-4ccd-921d-665c3dca1215",
								"exec": [
									" if(pm.variables.get(\"batchId\")=== \"{{batchId}}\"){\r",
									"pm.variables.set(\"batchId\", pm.collectionVariables.get(\"batchId\"));\r",
									"}\r",
									"else if(pm.variables.get(\"batchName\") === \"{{batchName}}\"){\r",
									"pm.variables.set(\"batchName\", pm.collectionVariables.get(\"batchName\"));\r",
									"}\r",
									"else if(pm.variables.get(\"programId\")=== \"{{programId}}\"){\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programId\"));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a63720b4-b242-4f9e-affb-8c3194c44dc1",
								"exec": [
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"var schemaId = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"    \"batchId\": {\r",
									"        \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"        \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"        \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"    }\r",
									"    },\r",
									"    \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"    ]\r",
									"}\r",
									"var schemaName = {\r",
									"\"type\": \"array\",\r",
									"\"items\": [\r",
									"    {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"batchId\": {\r",
									"        \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"        },\r",
									"        \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"        },\r",
									"        \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"        },\r",
									"        \"batchNoOfClasses\": {\r",
									"        \"type\": \"integer\"\r",
									"        },\r",
									"        \"programId\": {\r",
									"        \"type\": \"integer\"\r",
									"        },\r",
									"        \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"batchId\",\r",
									"        \"batchName\",\r",
									"        \"batchDescription\",\r",
									"        \"batchStatus\",\r",
									"        \"batchNoOfClasses\",\r",
									"        \"programId\",\r",
									"        \"programName\"\r",
									"    ]\r",
									"    }\r",
									"]\r",
									"}\r",
									"\r",
									"// Schema validation for valid search by ID & Name\r",
									"if(pm.variables.get(\"scenario\")===\"SearchByID-Valid\"){\r",
									"pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"pm.response.to.have.jsonSchema(schemaId);\r",
									"})}\r",
									"else if(pm.variables.get(\"scenario\")===\"SearchByName-Valid\"){\r",
									"pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"pm.response.to.have.jsonSchema(schemaName);\r",
									"})}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d34925ee-9dbd-480b-9b7f-4f235a8efffb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "EditBatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "201b85ba-08e6-4941-aed7-7891435612b1",
								"exec": [
									"if(pm.variables.get(\"scenario\") === \"EditValidAll\"){\r",
									"    \r",
									"    let Name = \"APIBatch\" + pm.variables.replaceIn('{{$randomWord}}');\r",
									"     pm.variables.set(\"batchName\", Name);\r",
									"     console.log(\"Generated Batch name:\", Name);\r",
									" }\r",
									" \r",
									"if(pm.variables.get(\"batchId\")=== \"{{batchId}}\"){\r",
									"pm.variables.set(\"batchId\", pm.collectionVariables.get(\"batchId\"));\r",
									"}\r",
									"if(pm.variables.get(\"batchName\")=== \"{{batchName}}\"){\r",
									"pm.variables.set(\"batchName\", pm.collectionVariables.get(\"batchName\"));\r",
									"}\r",
									" if(pm.variables.get(\"programId\")=== \"{{programId}}\"){\r",
									"pm.variables.set(\"programId\", pm.collectionVariables.get(\"programId\"));\r",
									"}\r",
									" if(pm.variables.get(\"programName\")=== \"{{programName}}\"){\r",
									"pm.variables.set(\"programName\", pm.collectionVariables.get(\"programName\"));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23496eee-f8ba-417c-a485-0d2647a9e2ff",
								"exec": [
									"\r",
									"if(pm.variables.get(\"scenario\")===\"EditValidAll\")\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"}\r",
									"var schema = {\r",
									"\"type\": \"object\",\r",
									"\"properties\": {\r",
									"    \"batchId\": {\r",
									"    \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"    \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"    \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"    \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"    \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"    \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"    \"type\": \"string\"\r",
									"    }\r",
									"},\r",
									"\"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"]\r",
									"}\r",
									"var Invalidschema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"const scenario = pm.variables.get(\"scenario\");\r",
									"\r",
									"// Schema validation for valid & invalid scenario\r",
									"if(pm.variables.get(\"statusCode\")===200){\r",
									"    pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"})}\r",
									"else if(pm.variables.get(\"statusCode\")===400){\r",
									"    pm.test(`[${scenario}] - Validating Schema AJV`, () =>{\r",
									"        pm.response.to.have.jsonSchema(Invalidschema);\r",
									"})\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "02f39537-e410-4086-a043-b8df7bf20357",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"batchDescription\": \"{{batchDescription}}\",\r\n\"batchId\": \"{{batchId}}\",\r\n\"batchName\": \"{{batchName}}\",\r\n\"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n\"batchStatus\": \"{{batchStatus}}\",\r\n\"programId\": \"{{programId}}\",\r\n\"programName\": \"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				}
			],
			"id": "ed4b8a34-4aca-4da3-9d27-532ee29de2f3"
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Create Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa9e2c87-8e33-40de-8a2b-9b38a269eea1",
								"exec": [
									"// Check if the response status is 201 and the scenario is \"ValidAll\"",
									"if (pm.variables.get(\"statusCode\") === 201 && pm.variables.get(\"scenario\") === \"ValidAll\") {",
									"    ",
									"    // Parse the JSON response",
									"    var jsonData = pm.response.json();",
									"",
									"    // Store classId and classTopic in collection variables for reuse",
									"    pm.collectionVariables.set(\"classId\", jsonData.csId);",
									"    pm.collectionVariables.set(\"classTopic\", jsonData.classTopic);",
									"",
									"    // Log stored values for debugging",
									"    console.log(\"Storing class id\", pm.collectionVariables.get(\"classId\"));",
									"    console.log(\"Storing class topic\", pm.collectionVariables.get(\"classTopic\"));",
									"",
									"    // Retrieve scenario name for dynamic test labeling",
									"    const scenarioName = pm.variables.get(\"scenario\");",
									"",
									"    // ------------------ SCHEMA VALIDATION ------------------",
									"    /**",
									"     * Validate that the response body adheres to the expected JSON schema.",
									"     * The schema is retrieved from Postman variables for dynamic checking.",
									"     */",
									"    var expectedSchema = pm.variables.get(\"expectedSchema\");",
									"    pm.test(`[${scenarioName}] - Response body matches the expected schema`, function () {",
									"        pm.response.to.have.jsonSchema(expectedSchema);",
									"    });",
									"",
									"    // ------------------ DATA TYPE VALIDATION ------------------",
									"    /**",
									"     * Validate data types of response fields to ensure consistency.",
									"     * Each test ensures that the response fields are of the expected type.",
									"     */",
									"    pm.test(`[${scenarioName}] - Data type validation`, function () {",
									"        ",
									"        // Validate batchId (should be a number)",
									"        pm.expect(typeof jsonData.batchId).to.eql(\"number\", \"Expected 'batchId' to be a number\");",
									"",
									"        // Validate classId (should be a number)",
									"        pm.expect(typeof jsonData.csId).to.eql(\"number\", \"Expected 'csId' to be a number\");",
									"",
									"        // Validate classComments (should be a string or null)",
									"        pm.expect(typeof jsonData.classComments).to.eql(\"string\", \"Expected 'classComments' to be a string or null\");",
									"",
									"        // Validate classDate (should be a string representing a date)",
									"        pm.expect(typeof jsonData.classDate).to.eql(\"string\", \"Expected 'classDate' to be a string\");",
									"",
									"        // Validate classDescription (should be a string or null)",
									"        pm.expect(typeof jsonData.classDescription).to.eql(\"string\", \"Expected 'classDescription' to be a string or null\");",
									"",
									"        // Validate classNotes (should be a string or null)",
									"        pm.expect(typeof jsonData.classNotes).to.eql(\"string\", \"Expected 'classNotes' to be a string or null\");",
									"",
									"        // Validate classRecordingPath (should be a string or null)",
									"        pm.expect(typeof jsonData.classRecordingPath).to.eql(\"string\", \"Expected 'classRecordingPath' to be a string or null\");",
									"",
									"        // Validate classStaffId (should be a string)",
									"        pm.expect(typeof jsonData.classStaffId).to.eql(\"string\", \"Expected 'classStaffId' to be a string\");",
									"",
									"        // Validate classTopic (should be a string)",
									"        pm.expect(typeof jsonData.classTopic).to.eql(\"string\", \"Expected 'classTopic' to be a string\");",
									"",
									"        // Validate classStatus (should be a string)",
									"        pm.expect(typeof jsonData.classStatus).to.eql(\"string\", \"Expected 'classStatus' to be a string\");",
									"",
									"        // Validate classScheduledDates (should be an array or null)",
									"        pm.expect(Array.isArray(jsonData.classScheduledDates)).to.be.true;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c3b70eb6-e3e5-4c6b-8f3d-cd9abf4bc732",
								"exec": [
									"// Retrieve the scenario name from variables",
									"const scenarioName = pm.variables.get(\"scenario\");",
									"",
									"// Log batchId from collection variables for debugging",
									"console.log(\"Chaining batch variable\", pm.collectionVariables.get(\"batchId\"));",
									"",
									"/**",
									" * Function to process and correctly set variables.",
									" * Handles conversion of data types (null, boolean, number, and string) to ensure correct request formatting.",
									" * @param {string} varName - The name of the variable to process.",
									" * @returns {any} - The processed value with the correct data type.",
									" */",
									"const processVariable = (varName) => {",
									"    let value = pm.variables.get(varName);",
									"",
									"    // Handle uninitialized variables (Postman placeholders)",
									"    if (value === \"{{\" + varName + \"}}\") {",
									"        return null; // Keep it as actual null if uninitialized",
									"    }",
									"",
									"    // Convert string \"null\" to actual null",
									"    if (value === \"null\") {",
									"        return null;",
									"    }",
									"",
									"    // Convert string \"true\" and \"false\" to boolean values",
									"    if (value === \"true\") {",
									"        return true;",
									"    }",
									"    if (value === \"false\") {",
									"        return false;",
									"    }",
									"",
									"    // If already a boolean, return as is",
									"    if (value === true || value === false) {",
									"        return value;",
									"    }",
									"",
									"    // Convert numeric strings to actual numbers",
									"    if (!isNaN(value) && value !== null && value !== \"\") {",
									"        return Number(value);",
									"    }",
									"",
									"    // Wrap non-empty strings in double quotes if not already quoted",
									"    if (typeof value === 'string' && value.trim() !== \"\" && !value.startsWith('\"') && !value.endsWith('\"')) {",
									"        return `\"${value}\"`;",
									"    }",
									"",
									"    return value;  // Return other values as they are",
									"};",
									"",
									"// Set classTopic dynamically if it's uninitialized",
									"if (pm.variables.get(\"classTopic\") === \"{{classTopic}}\") {",
									"    let Topic = \"APIInnovatorsClass\" + pm.variables.replaceIn('{{$randomFirstName}}');",
									"    pm.variables.set(\"classTopic\", `\"${Topic}\"`);",
									"} else {",
									"    pm.variables.set(\"classTopic\", processVariable(\"classTopic\"));",
									"}",
									"",
									"// Set batchId from collection variables if it's uninitialized",
									"if (pm.variables.get(\"batchId\") === \"{{batchId}}\") {",
									"    pm.variables.set(\"batchId\", pm.collectionVariables.get(\"batchId\"));",
									"    console.log(\"Batch id is \", pm.variables.get(\"batchId\"));",
									"}",
									"",
									"// Process and set additional class-related variables",
									"pm.variables.set(\"classStaffId\", processVariable(\"classStaffId\"));",
									"pm.variables.set(\"classStatus\", processVariable(\"classStatus\"));",
									"pm.variables.set(\"classComments\", processVariable(\"classComments\"));",
									"pm.variables.set(\"classNotes\", processVariable(\"classNotes\"));",
									"pm.variables.set(\"classDescription\", processVariable(\"classDescription\"));",
									"",
									"// Convert classScheduledDates array to a JSON string before setting the variable",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(pm.variables.get(\"classScheduledDates\")));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e5138fba-6f31-4e6f-8b6a-98c4abeab954",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchId\": {{batchId}},\n  \"classNo\": {{classNo}},\n   \"classDate\": \"{{classDate}}\",\n    \"classTopic\": {{classTopic}},\n    \"classStatus\":{{classStatus}},\n    \"classStaffId\": {{classStaffId}},\n    \"classDescription\": {{classDescription}},\n    \"classComments\": {{classComments}},\n    \"classNotes\": {{classNotes}},\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\n\"classScheduledDates\":  {{classScheduledDates}}\n\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "Get Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "affe4eb5-d22a-49eb-8dcc-863cd2987909",
								"exec": [
									"pm.variables.set(\"classId\", pm.collectionVariables.get(\"classId\"));",
									"pm.variables.set(\"classTopic\", pm.collectionVariables.get(\"classTopic\"));",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd859ec4-6bbb-4064-a6cc-ab6988ed18ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa9e2c87-8e33-40de-8a2b-9b38a269eea1",
								"exec": [
									"if(pm.variables.get(\"statusCode\")===200){",
									"   let jsonData = pm.response.json();",
									"",
									"",
									" //-------------SCHEMA VALIDATION---------------",
									" var expectedSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"batchId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"classComments\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"classDate\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"classDescription\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"classNo\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"classStatus\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"classNotes\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"classRecordingPath\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"    \"classStaffId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"classTopic\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"classScheduledDates\": {",
									"      \"type\": [\"array\",\"null\"],",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"batchId\",",
									"    \"classDate\",",
									"    \"classNo\",",
									"    \"classStatus\",",
									"    \"classStaffId\",",
									"    \"classTopic\"",
									"  ]",
									"}",
									"",
									"",
									"if(pm.variables.get(\"_comment\")===\"valid all\")",
									"{ ",
									"   //-----------SCHEMA VALIDATION----------------",
									"   pm.test(\"Verify JSON Schema\", function () {",
									"        pm.response.to.have.jsonSchema(expectedSchema);",
									"    });",
									"",
									"   //------------DATA TYPE VALIDATION----------------",
									"   pm.test(\"Data Type Validation\",()=>{",
									"       ",
									"        // Validate batchId",
									"        pm.expect(typeof jsonData.batchId).to.eql(\"number\", \"Expected 'batchId' to be a number\");",
									"",
									"        // Validate classId",
									"        pm.expect(typeof jsonData.csId).to.eql(\"number\", \"Expected 'csId' to be a number\");",
									"",
									"        // Validate classComments",
									"        pm.expect(typeof jsonData.classComments).to.eql(\"string\" || \"null\", \"Expected 'classComments' to be a string\");",
									"    ",
									"        // Validate classDate",
									"        pm.expect(typeof jsonData.classDate).to.eql(\"string\", \"Expected 'classDate' to be a string\");",
									"    ",
									"        // Validate classDescription",
									"        pm.expect(typeof jsonData.classDescription).to.eql(\"string\" || \"null\", \"Expected 'classDescription' to be a string\");",
									"    ",
									"        // Validate classNotes",
									"        pm.expect(typeof jsonData.classNotes).to.eql(\"string\" || \"null\", \"Expected 'classNotes' to be a string\");",
									"    ",
									"        // Validate classRecordingPath ",
									"        pm.expect(typeof jsonData.classRecordingPath).to.eql(\"string\" || \"null\", \"Expected 'classRecordingPath' to be a string\");",
									"    ",
									"        // Validate classStaffId ",
									"        pm.expect(typeof jsonData.classStaffId).to.eql(\"string\", \"Expected 'classStaffId' to be a string\");",
									"    ",
									"        // Validate classTopic",
									"        pm.expect(typeof jsonData.classTopic).to.eql(\"string\", \"Expected 'classTopic' to be a string\");",
									"   ",
									"        // Validate classStatus",
									"        pm.expect(typeof jsonData.classStatus).to.eql(\"string\", \"Expected 'classStatus' to be a string\");",
									"   ",
									"        // Validate classScheduledDates",
									"        pm.expect(typeof jsonData.classScheduledDates).to.eql(\"object\" || \"null\", \"Expected 'classScheduledDates' to be a object\");",
									"        ",
									"            });",
									"",
									" }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b078ae6b-8e96-4600-b1bb-1d18ee3a5fdc",
								"exec": [
									"pm.variables.set(\"classId\", pm.collectionVariables.get(\"classId\"));",
									"pm.variables.set(\"classTopic\", pm.collectionVariables.get(\"classTopic\"));",
									"",
									"",
									"if(pm.variables.get(\"classTopicUpdate\") === \"{{classTopicUpdate}}\"){",
									"  ",
									"    let TopicUpdate = \"APIInnovatorsClassUpdate\" + pm.variables.replaceIn('{{$randomFirstName}}');",
									"     pm.variables.set(\"classTopicUpdate\", TopicUpdate);",
									" }",
									"",
									"",
									"pm.variables.set(\"batchId\", pm.collectionVariables.get(\"batchId\"));",
									"pm.variables.set(\"classScheduledDates\", JSON.stringify(pm.variables.get(\"classScheduledDates\")));",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "93c712a6-dc1a-4a56-9c18-9993b7170973",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchId\": {{batchId}},\n  \"classNo\": {{classNo}},\n   \"classDate\": \"{{classDate}}\",\n    \"classTopic\": \"{{classTopicUpdate}}\",\n    \"classStatus\":\"{{classStatus}}\",\n    \"classStaffId\": \"{{classStaffId}}\",\n    \"classDescription\": \"{{classDescription}}\",\n    \"classComments\": \"{{classComments}}\",\n    \"classNotes\": \"{{classNotes}}\",\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\n\"classScheduledDates\":  {{classScheduledDates}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				},
				{
					"name": "Update Class Recording path",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa9e2c87-8e33-40de-8a2b-9b38a269eea1",
								"exec": [
									"if(pm.variables.get(\"statusCode\")===200){",
									"   let jsonData = pm.response.json();",
									"",
									"//-------------SCHEMA VALIDATION---------------",
									" var expectedSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"classRecordingPath\": {",
									"      \"type\": [\"string\",\"null\"]",
									"    },",
									"     \"csId\": {",
									"      \"type\": [\"integer\",\"null\"]",
									"    },",
									"  },",
									"  \"required\": [",
									"  ]",
									"}",
									"",
									" //-----------SCHEMA VALIDATION----------------",
									"   pm.test(\"Verify JSON Schema\", function () {",
									"        pm.response.to.have.jsonSchema(expectedSchema);",
									"    });",
									"",
									"   //------------DATA TYPE VALIDATION----------------",
									"   pm.test(\"Data Type Validation\",()=>{",
									"        // Validate classRecordingPath",
									"        pm.expect(typeof jsonData.classRecordingPath).to.eql(\"string\" || \"null\", \"Expected 'classRecordingPath' to be a string\");",
									"    ",
									"        // Validate classId",
									"        pm.expect(typeof jsonData.csId).to.eql(\"number\" || \"null\", \"Expected 'csId' to be a number\");",
									"            });",
									"",
									" }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52d2eb92-7aac-4ed1-8ed7-31046ee43246",
								"exec": [
									"pm.variables.set(\"classId\", pm.collectionVariables.get(\"classId\"));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "46ad580f-5afb-4c96-b1bb-9362c63522bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\n\"csId\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				}
			],
			"id": "5927191d-57bf-4491-8423-99aab342fd39"
		},
		{
			"name": "User",
			"item": [],
			"id": "6c3524fd-312f-4dc6-bc35-746c3b5c9fef"
		},
		{
			"name": "Delete and Data Cleanup",
			"item": [
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efe5520e-fca2-41a9-bbac-79f43a0bf79a",
								"exec": [
									"// pm.variables.set(\"classId\", pm.collectionVariables.get(\"classId\"));",
									"// pm.variables.set(\"classTopic\", pm.collectionVariables.get(\"classTopic\"));",
									"",
									"// pm.collectionVariables.unset(\"classId\");",
									"// pm.collectionVariables.unset(\"classTopic\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "acd9ed6c-9226-4af9-8849-e34d6c08a922",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				}
			],
			"id": "535fbe46-c988-42dd-aaeb-7099cbbe7540"
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Logout",
					"id": "61a1f08f-9679-453c-9cad-65e486294c61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURI}}{{endpoint}}"
					},
					"response": []
				}
			],
			"id": "779574b2-ac1a-4834-aa53-1569e5260f77"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "26a062ee-364a-4c53-ba6a-46d7058b4c59",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//--------------Fetch Data from External JSON Data file-----------------\r",
					"if (typeof pm.variables.get('requestdata') !== 'object') {\r",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());\r",
					"}\r",
					"const requestdata = pm.variables.get('requestdata');\r",
					"\r",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {\r",
					"    console.log(\"No external file found\")\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];\r",
					"if(!currentrequest){\r",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
					"}\r",
					"\r",
					"const variables = currentrequest.data.shift();\r",
					"Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"pm.variables.set('requestdata',requestdata);\r",
					"if(currentrequest.data.length > 0){\r",
					"    pm.execution.setNextRequest(pm.info.requestName)\r",
					"}\r",
					"\r",
					"//------------------ Authorization Set Up-----------------\r",
					"pm.request.headers.clear(); // Clear all headers to prevent residual values\r",
					"pm.cookies.clear(); // Clear session cookies\r",
					"\r",
					"var AuthType = pm.variables.get(\"authType\");\r",
					"console.log(\"Auth Type:\", AuthType);\r",
					"\r",
					"switch (AuthType) {\r",
					"    case \"No Auth\":\r",
					"        // Ensure no Authorization header is sent\r",
					"        pm.request.headers.upsert({\r",
					"            key: 'Authorization',\r",
					"            value: ''\r",
					"        });\r",
					"        console.log(\"🟢 Authorization cleared for 'No Auth' scenario.\");\r",
					"        \r",
					"        // Set request authorization type to No Auth\r",
					"        pm.request.auth = { type: 'noauth' };\r",
					"        console.log(\"[AUTH] No authentication required.\");\r",
					"        break;\r",
					"\r",
					"    case \"Bearer Token\":\r",
					"        let token = pm.environment.get(\"Authtoken\"); // Retrieve token from environment\r",
					"        pm.request.auth = {\r",
					"            type: \"bearer\",\r",
					"            bearer: { token: token }\r",
					"        };\r",
					"        console.log(\"[AUTH] Using valid Bearer Token.\");\r",
					"        break;\r",
					"\r",
					"    case \"Invalid Bearer Token\":\r",
					"        // Set an invalid token for testing\r",
					"        pm.request.auth = {\r",
					"            type: \"bearer\",\r",
					"            bearer: { token: \"invalid_token_123\" }\r",
					"        };\r",
					"        console.log(\"[AUTH] Using invalid Bearer Token for testing.\");\r",
					"        break;\r",
					"\r",
					"    default:\r",
					"        console.log(\"⚠️ Unknown AuthType: \" + AuthType);\r",
					"        break;\r",
					"}\r",
					"\r",
					"//-------------- Set the Request Method Dynamically---------------\r",
					" if (variables.method) {\r",
					"    pm.request.method = variables.method;\r",
					" }\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "46c182b7-039a-4091-93ff-52bee0e44ba0",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const scenarioName = pm.variables.get(\"scenario\");\r",
					"\r",
					"/* Define a function that contains common tests to validate the API response \r",
					"----------------------------Common Test Functions--------------------------*/\r",
					"var commonTests = () =>{\r",
					"    \r",
					"// Test to validate the status code of the response\r",
					"pm.test(`[${scenarioName}] - Validating Status Code`, ()=> {\r",
					"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"});\r",
					"\r",
					"// Test to validate the status line (status text) of the response\r",
					"pm.test(`[${scenarioName}] - Validating Status Line`, function () {\r",
					"    pm.expect(pm.response.status).to.eql(pm.variables.get('statusText'));\r",
					"});\r",
					"\r",
					"// Test to validate the Content-Type header of the response\r",
					"pm.test(`[${scenarioName}] - Content-Type header is application/json`, ()=>{\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
					"});\r",
					"\r",
					" // Test to check that the response time is below 3000ms\r",
					"pm.test(`[${scenarioName}] - Response time is less than 3000ms`, function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
					"});\r",
					"}\r",
					"\r",
					"// Store the common tests as a string in the environment for later execution\r",
					"pm.environment.set(\"commonTests\",commonTests.toString());\r",
					"\r",
					"\r",
					"// Now, let's validate the response using the common tests we defined above\r",
					"// Check if the response body is not empty\r",
					"if (pm.response.text() !== '') {\r",
					"    try {\r",
					"        // Try to parse the response body as JSON\r",
					"        const jsonData = pm.response.json();\r",
					"        // If the response is valid JSON, run the common tests\r",
					"        eval(pm.environment.get(\"commonTests\"))();\r",
					"    } \r",
					"    catch (e) {\r",
					"      console.log(\"Failed to parse JSON response:\", e);\r",
					"    \r",
					"    pm.test(`[${scenarioName}] - Validating Status Code`, () => {\r",
					"        pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"    });\r",
					"\r",
					"    pm.test(`[${scenarioName}] - Response status text check`, function () {\r",
					"        pm.expect(pm.response.status).to.eql(pm.variables.get('statusText'));\r",
					"    });\r",
					"    }\r",
					"  } \r",
					"  else {\r",
					" console.log(\"Empty response received.\");\r",
					"    \r",
					"    pm.test(`[${scenarioName}] - Validating Status Code`, () => {\r",
					"        pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
					"    });\r",
					"  }\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9dd5a9f0-631d-4ee4-9b17-ec3432745fab",
			"key": "base-url",
			"value": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms"
		},
		{
			"id": "3af04658-4069-4951-9304-df4c06418e87",
			"key": "token",
			"value": ""
		},
		{
			"id": "0c82fd6d-733e-434d-ac46-63533b613810",
			"key": "programId2",
			"value": ""
		},
		{
			"id": "2d174484-75f3-40ac-bf25-351a9ae2b81b",
			"key": "programName2",
			"value": ""
		},
		{
			"id": "3c116ed1-b995-4204-83bd-27fece093c25",
			"key": "programId",
			"value": ""
		},
		{
			"id": "cc84a647-ab22-486d-92a0-32d76d2fc7f4",
			"key": "programName",
			"value": ""
		},
		{
			"id": "c7a6efcf-9616-4922-b4b4-7511bdfedb4f",
			"key": "batchId",
			"value": ""
		},
		{
			"id": "db949a7f-3e21-4ce2-9250-c97b428b787f",
			"key": "batchName",
			"value": ""
		},
		{
			"id": "59a8b80a-a256-4bc0-a5f6-7e4a8a0a67e4",
			"key": "classId",
			"value": ""
		},
		{
			"id": "d88fb27c-5fd5-459e-86cd-6a0fe3ae0a1d",
			"key": "classTopic",
			"value": ""
		}
	]
}